# Fastlane Configuration for TravelMate

default_platform(:ios)

# iOS Lanes
platform :ios do
  desc "Build and upload to TestFlight"
  lane :beta do
    # Ensure clean git status
    ensure_git_status_clean
    
    # Increment build number
    increment_build_number(xcodeproj: "ios/TravelMate.xcodeproj")
    
    # Get current version
    version = get_version_number(xcodeproj: "ios/TravelMate.xcodeproj")
    build = get_build_number(xcodeproj: "ios/TravelMate.xcodeproj")
    
    # Build the app
    build_app(
      workspace: "ios/TravelMate.xcworkspace",
      scheme: "TravelMate",
      export_method: "app-store",
      output_directory: "./build",
      output_name: "TravelMate.ipa"
    )
    
    # Upload to TestFlight
    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      apple_id: "YOUR_APP_ID"
    )
    
    # Create git tag
    add_git_tag(
      tag: "ios/v#{version}-#{build}"
    )
    
    # Push to remote
    push_to_git_remote
    
    # Send Slack notification (optional)
    slack(
      message: "Successfully deployed TravelMate iOS v#{version} (#{build}) to TestFlight! ðŸš€",
      success: true
    )
  end
  
  desc "Deploy to App Store"
  lane :release do
    # Ensure on main branch
    ensure_git_branch(branch: "main")
    
    # Build the app
    build_app(
      workspace: "ios/TravelMate.xcworkspace",
      scheme: "TravelMate",
      export_method: "app-store"
    )
    
    # Upload to App Store Connect
    upload_to_app_store(
      force: true,
      skip_metadata: false,
      skip_screenshots: false,
      submit_for_review: false,
      automatic_release: false
    )
    
    # Notify team
    slack(
      message: "TravelMate iOS has been uploaded to App Store Connect! ðŸŽ‰",
      success: true
    )
  end
  
  desc "Create screenshots"
  lane :screenshots do
    capture_ios_screenshots(
      workspace: "ios/TravelMate.xcworkspace",
      scheme: "TravelMateUITests"
    )
    
    frame_screenshots(
      path: "./fastlane/screenshots",
      force_device_type: "iPhone 13 Pro"
    )
  end
end

# Android Lanes
platform :android do
  desc "Build and upload to Google Play Beta"
  lane :beta do
    # Ensure clean git status
    ensure_git_status_clean
    
    # Increment version code
    gradle(
      task: "incrementVersionCode",
      project_dir: "android/"
    )
    
    # Build AAB
    gradle(
      task: "bundle",
      build_type: "Release",
      project_dir: "android/"
    )
    
    # Upload to Play Store
    upload_to_play_store(
      track: "beta",
      aab: "android/app/build/outputs/bundle/release/app-release.aab",
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
    
    # Get version info
    version_name = get_version_name(
      gradle_file_path: "android/app/build.gradle"
    )
    version_code = get_version_code(
      gradle_file_path: "android/app/build.gradle"
    )
    
    # Create git tag
    add_git_tag(
      tag: "android/v#{version_name}-#{version_code}"
    )
    
    # Push to remote
    push_to_git_remote
    
    # Send notification
    slack(
      message: "Successfully deployed TravelMate Android v#{version_name} (#{version_code}) to Play Store Beta! ðŸš€",
      success: true
    )
  end
  
  desc "Deploy to Google Play Production"
  lane :release do
    # Ensure on main branch
    ensure_git_branch(branch: "main")
    
    # Build AAB
    gradle(
      task: "bundle",
      build_type: "Release",
      project_dir: "android/"
    )
    
    # Upload to Play Store
    upload_to_play_store(
      track: "production",
      aab: "android/app/build/outputs/bundle/release/app-release.aab",
      rollout: "0.1", # 10% rollout
      skip_upload_metadata: false,
      skip_upload_images: false,
      skip_upload_screenshots: false
    )
    
    # Notify team
    slack(
      message: "TravelMate Android has been uploaded to Google Play Production! ðŸŽ‰",
      success: true
    )
  end
  
  desc "Create screenshots"
  lane :screenshots do
    capture_android_screenshots(
      app_package_name: "com.travelmate.app",
      app_apk_path: "android/app/build/outputs/apk/debug/app-debug.apk",
      tests_apk_path: "android/app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk"
    )
  end
end

# Shared Lanes
desc "Run all tests"
lane :test do
  # iOS tests
  run_tests(
    workspace: "ios/TravelMate.xcworkspace",
    scheme: "TravelMate",
    devices: ["iPhone 14"]
  )
  
  # Android tests
  gradle(
    task: "test",
    project_dir: "android/"
  )
  
  # JavaScript tests
  sh("npm test")
end

desc "Submit for review"
lane :submit_review do
  # iOS
  deliver(
    submit_for_review: true,
    automatic_release: false,
    force: true,
    submission_information: {
      add_id_info_uses_idfa: false,
      content_rights_contains_third_party_content: false,
      export_compliance_uses_encryption: false
    }
  )
  
  # Android - promote from beta to production
  upload_to_play_store(
    track: "beta",
    track_promote_to: "production",
    rollout: "0.1"
  )
end

# Error handling
error do |lane, exception|
  slack(
    message: "Error in lane #{lane}: #{exception.message}",
    success: false
  )
end