const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { validationResult } = require('express-validator');

class AuthController {
  // Generate JWT token
  static generateToken(userId) {
    return jwt.sign(
      { userId },
      process.env.JWT_SECRET,
      { expiresIn: process.env.JWT_EXPIRES_IN || '7d' }
    );
  }

  // Generate refresh token
  static generateRefreshToken(userId) {
    return jwt.sign(
      { userId, type: 'refresh' },
      process.env.JWT_SECRET,
      { expiresIn: '30d' }
    );
  }

  // Register new user
  static async register(req, res) {
    try {
      // Check validation errors
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          success: false,
          message: 'Validation failed',
          errors: errors.array()
        });
      }

      const { name, email, password } = req.body;

      // Check if user already exists
      const existingUser = await req.prisma.user.findUnique({
        where: { email }
      });

      if (existingUser) {
        return res.status(409).json({
          success: false,
          message: 'User with this email already exists'
        });
      }

      // Hash password
      const hashedPassword = await bcrypt.hash(password, 12);

      // Create user
      const user = await req.prisma.user.create({
        data: {
          name,
          email,
          password: hashedPassword,
          tier: 'FREE',
          alertsUsed: 0,
          maxAlerts: 3
        },
        select: {
          id: true,
          name: true,
          email: true,
          tier: true,
          alertsUsed: true,
          maxAlerts: true,
          createdAt: true
        }
      });

      // Generate tokens
      const token = AuthController.generateToken(user.id);
      const refreshToken = AuthController.generateRefreshToken(user.id);

      // Store refresh token in Redis with 30-day expiration
      await req.redis.setEx(
        `refresh_token:${user.id}`,
        30 * 24 * 60 * 60, // 30 days in seconds
        refreshToken
      );

      // Log registration
      console.log(`✅ New user registered: ${email}`);

      res.status(201).json({
        success: true,
        message: 'User registered successfully',
        data: {
          user,
          token,
          refreshToken
        }
      });

    } catch (error) {
      console.error('Registration error:', error);
      res.status(500).json({
        success: false,
        message: 'Internal server error during registration'
      });
    }
  }

  // Login user
  static async login(req, res) {
    try {
      // Check validation errors
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          success: false,
          message: 'Validation failed',
          errors: errors.array()
        });
      }

      const { email, password } = req.body;

      // Find user with password
      const user = await req.prisma.user.findUnique({
        where: { email },
        include: {
          subscription: true
        }
      });

      if (!user) {
        return res.status(401).json({
          success: false,
          message: 'Invalid email or password'
        });
      }

      // Check password
      const isPasswordValid = await bcrypt.compare(password, user.password);
      if (!isPasswordValid) {
        return res.status(401).json({
          success: false,
          message: 'Invalid email or password'
        });
      }

      // Update last login (optional tracking)
      await req.prisma.user.update({
        where: { id: user.id },
        data: { updatedAt: new Date() }
      });

      // Generate tokens
      const token = AuthController.generateToken(user.id);
      const refreshToken = AuthController.generateRefreshToken(user.id);

      // Store refresh token in Redis
      await req.redis.setEx(
        `refresh_token:${user.id}`,
        30 * 24 * 60 * 60, // 30 days
        refreshToken
      );

      // Remove password from response
      const { password: _, ...userWithoutPassword } = user;

      console.log(`✅ User logged in: ${email}`);

      res.json({
        success: true,
        message: 'Login successful',
        data: {
          user: userWithoutPassword,
          token,
          refreshToken
        }
      });

    } catch (error) {
      console.error('Login error:', error);
      res.status(500).json({
        success: false,
        message: 'Internal server error during login'
      });
    }
  }

  // Refresh access token
  static async refreshToken(req, res) {
    try {
      const { refreshToken } = req.body;

      if (!refreshToken) {
        return res.status(401).json({
          success: false,
          message: 'Refresh token is required'
        });
      }

      // Verify refresh token
      let decoded;
      try {
        decoded = jwt.verify(refreshToken, process.env.JWT_SECRET);
      } catch (error) {
        return res.status(401).json({
          success: false,
          message: 'Invalid refresh token'
        });
      }

      if (decoded.type !== 'refresh') {
        return res.status(401).json({
          success: false,
          message: 'Invalid token type'
        });
      }

      // Check if refresh token exists in Redis
      const storedToken = await req.redis.get(`refresh_token:${decoded.userId}`);
      if (storedToken !== refreshToken) {
        return res.status(401).json({
          success: false,
          message: 'Refresh token not found or expired'
        });
      }

      // Get user
      const user = await req.prisma.user.findUnique({
        where: { id: decoded.userId },
        select: {
          id: true,
          name: true,
          email: true,
          tier: true,
          alertsUsed: true,
          maxAlerts: true
        }
      });

      if (!user) {
        return res.status(401).json({
          success: false,
          message: 'User not found'
        });
      }

      // Generate new access token
      const newToken = AuthController.generateToken(user.id);

      res.json({
        success: true,
        message: 'Token refreshed successfully',
        data: {
          user,
          token: newToken
        }
      });

    } catch (error) {
      console.error('Token refresh error:', error);
      res.status(500).json({
        success: false,
        message: 'Internal server error during token refresh'
      });
    }
  }

  // Logout user
  static async logout(req, res) {
    try {
      const userId = req.user.id;

      // Remove refresh token from Redis
      await req.redis.del(`refresh_token:${userId}`);

      console.log(`✅ User logged out: ${req.user.email}`);

      res.json({
        success: true,
        message: 'Logged out successfully'
      });

    } catch (error) {
      console.error('Logout error:', error);
      res.status(500).json({
        success: false,
        message: 'Internal server error during logout'
      });
    }
  }

  // Get current user profile
  static async getProfile(req, res) {
    try {
      const user = await req.prisma.user.findUnique({
        where: { id: req.user.id },
        select: {
          id: true,
          name: true,
          email: true,
          avatar: true,
          tier: true,
          alertsUsed: true,
          maxAlerts: true,
          createdAt: true,
          updatedAt: true,
          subscription: {
            select: {
              status: true,
              tier: true,
              currentPeriodEnd: true,
              cancelAtPeriodEnd: true
            }
          },
          _count: {
            select: {
              trips: true,
              alerts: true
            }
          }
        }
      });

      if (!user) {
        return res.status(404).json({
          success: false,
          message: 'User not found'
        });
      }

      res.json({
        success: true,
        data: { user }
      });

    } catch (error) {
      console.error('Get profile error:', error);
      res.status(500).json({
        success: false,
        message: 'Internal server error while fetching profile'
      });
    }
  }

  // Update user profile
  static async updateProfile(req, res) {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          success: false,
          message: 'Validation failed',
          errors: errors.array()
        });
      }

      const { name, avatar } = req.body;
      const userId = req.user.id;

      const updatedUser = await req.prisma.user.update({
        where: { id: userId },
        data: {
          ...(name && { name }),
          ...(avatar && { avatar })
        },
        select: {
          id: true,
          name: true,
          email: true,
          avatar: true,
          tier: true,
          alertsUsed: true,
          maxAlerts: true,
          updatedAt: true
        }
      });

      res.json({
        success: true,
        message: 'Profile updated successfully',
        data: { user: updatedUser }
      });

    } catch (error) {
      console.error('Update profile error:', error);
      res.status(500).json({
        success: false,
        message: 'Internal server error while updating profile'
      });
    }
  }

  // Change password
  static async changePassword(req, res) {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          success: false,
          message: 'Validation failed',
          errors: errors.array()
        });
      }

      const { currentPassword, newPassword } = req.body;
      const userId = req.user.id;

      // Get user with password
      const user = await req.prisma.user.findUnique({
        where: { id: userId }
      });

      // Verify current password
      const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password);
      if (!isCurrentPasswordValid) {
        return res.status(400).json({
          success: false,
          message: 'Current password is incorrect'
        });
      }

      // Hash new password
      const hashedNewPassword = await bcrypt.hash(newPassword, 12);

      // Update password
      await req.prisma.user.update({
        where: { id: userId },
        data: { password: hashedNewPassword }
      });

      // Revoke all refresh tokens for security
      await req.redis.del(`refresh_token:${userId}`);

      console.log(`✅ Password changed for user: ${user.email}`);

      res.json({
        success: true,
        message: 'Password changed successfully. Please log in again.'
      });

    } catch (error) {
      console.error('Change password error:', error);
      res.status(500).json({
        success: false,
        message: 'Internal server error while changing password'
      });
    }
  }
}

module.exports = AuthController;