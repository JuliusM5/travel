const jwt = require('jsonwebtoken');

/**
 * Authentication middleware to verify JWT tokens
 * Adds user information to req.user if token is valid
 */
const authMiddleware = async (req, res, next) => {
  try {
    // Get token from header
    const authHeader = req.header('Authorization');
    
    if (!authHeader) {
      return res.status(401).json({
        success: false,
        message: 'No authorization header provided'
      });
    }

    // Check if header starts with 'Bearer '
    if (!authHeader.startsWith('Bearer ')) {
      return res.status(401).json({
        success: false,
        message: 'Invalid authorization header format. Use: Bearer <token>'
      });
    }

    // Extract token
    const token = authHeader.substring(7); // Remove 'Bearer ' prefix

    if (!token) {
      return res.status(401).json({
        success: false,
        message: 'No token provided'
      });
    }

    // Verify token
    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET);
    } catch (error) {
      if (error.name === 'TokenExpiredError') {
        return res.status(401).json({
          success: false,
          message: 'Token expired',
          code: 'TOKEN_EXPIRED'
        });
      }
      
      if (error.name === 'JsonWebTokenError') {
        return res.status(401).json({
          success: false,
          message: 'Invalid token',
          code: 'INVALID_TOKEN'
        });
      }

      throw error; // Re-throw unexpected errors
    }

    // Check if it's a refresh token (should not be used for API access)
    if (decoded.type === 'refresh') {
      return res.status(401).json({
        success: false,
        message: 'Refresh token cannot be used for API access'
      });
    }

    // Get user from database
    const user = await req.prisma.user.findUnique({
      where: { id: decoded.userId },
      select: {
        id: true,
        name: true,
        email: true,
        tier: true,
        alertsUsed: true,
        maxAlerts: true,
        createdAt: true,
        subscription: {
          select: {
            status: true,
            tier: true,
            currentPeriodEnd: true
          }
        }
      }
    });

    if (!user) {
      return res.status(401).json({
        success: false,
        message: 'User not found',
        code: 'USER_NOT_FOUND'
      });
    }

    // Add user to request object
    req.user = user;
    
    // Continue to next middleware
    next();

  } catch (error) {
    console.error('Auth middleware error:', error);
    res.status(500).json({
      success: false,
      message: 'Internal server error during authentication'
    });
  }
};

/**
 * Optional authentication middleware
 * Adds user information if token is valid, but doesn't block if no token
 */
const optionalAuthMiddleware = async (req, res, next) => {
  try {
    const authHeader = req.header('Authorization');
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      // No token provided, continue without user
      req.user = null;
      return next();
    }

    const token = authHeader.substring(7);
    
    if (!token) {
      req.user = null;
      return next();
    }

    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      
      if (decoded.type === 'refresh') {
        req.user = null;
        return next();
      }

      const user = await req.prisma.user.findUnique({
        where: { id: decoded.userId },
        select: {
          id: true,
          name: true,
          email: true,
          tier: true,
          alertsUsed: true,
          maxAlerts: true
        }
      });

      req.user = user;
    } catch (error) {
      // Token invalid, continue without user
      req.user = null;
    }

    next();

  } catch (error) {
    console.error('Optional auth middleware error:', error);
    req.user = null;
    next();
  }
};

/**
 * Middleware to check if user has premium subscription
 */
const requirePremium = (req, res, next) => {
  if (!req.user) {
    return res.status(401).json({
      success: false,
      message: 'Authentication required'
    });
  }

  if (req.user.tier !== 'PREMIUM' && req.user.tier !== 'TEAM') {
    return res.status(403).json({
      success: false,
      message: 'Premium subscription required for this feature',
      code: 'PREMIUM_REQUIRED',
      upgradeUrl: '/api/subscriptions/upgrade'
    });
  }

  next();
};

/**
 * Middleware to check if user has admin privileges
 */
const requireAdmin = (req, res, next) => {
  if (!req.user) {
    return res.status(401).json({
      success: false,
      message: 'Authentication required'
    });
  }

  // For now, we'll use email-based admin check
  // In production, you'd have a proper role system
  const adminEmails = (process.env.ADMIN_EMAILS || '').split(',');
  
  if (!adminEmails.includes(req.user.email)) {
    return res.status(403).json({
      success: false,
      message: 'Admin privileges required'
    });
  }

  next();
};

/**
 * Middleware to validate user owns resource
 * Usage: validateOwnership('userId', 'trip')
 */
const validateOwnership = (userIdField = 'userId', resourceType = 'resource') => {
  return async (req, res, next) => {
    try {
      if (!req.user) {
        return res.status(401).json({
          success: false,
          message: 'Authentication required'
        });
      }

      const resourceId = req.params.id;
      if (!resourceId) {
        return res.status(400).json({
          success: false,
          message: 'Resource ID is required'
        });
      }

      let resource;
      
      // Find resource based on type
      switch (resourceType) {
        case 'trip':
          resource = await req.prisma.trip.findUnique({
            where: { id: resourceId },
            select: { userId: true, collaborators: true }
          });
          break;
        case 'alert':
          resource = await req.prisma.alert.findUnique({
            where: { id: resourceId },
            select: { userId: true }
          });
          break;
        case 'activity':
          resource = await req.prisma.activity.findUnique({
            where: { id: resourceId },
            select: { userId: true }
          });
          break;
        default:
          return res.status(400).json({
            success: false,
            message: 'Invalid resource type'
          });
      }

      if (!resource) {
        return res.status(404).json({
          success: false,
          message: `${resourceType.charAt(0).toUpperCase() + resourceType.slice(1)} not found`
        });
      }

      // Check ownership or collaboration
      const isOwner = resource[userIdField] === req.user.id;
      const isCollaborator = resource.collaborators && resource.collaborators.includes(req.user.id);

      if (!isOwner && !isCollaborator) {
        return res.status(403).json({
          success: false,
          message: `You don't have permission to access this ${resourceType}`
        });
      }

      // Add resource to request for use in controller
      req.resource = resource;
      next();

    } catch (error) {
      console.error('Ownership validation error:', error);
      res.status(500).json({
        success: false,
        message: 'Internal server error during ownership validation'
      });
    }
  };
};

module.exports = {
  authMiddleware,
  optionalAuthMiddleware,
  requirePremium,
  requireAdmin,
  validateOwnership
};