const winston = require('winston');

// Configure Winston logger
const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.errors({ stack: true }),
    winston.format.json()
  ),
  defaultMeta: { service: 'tripmart-api' },
  transports: [
    // Write all logs with importance level of `error` or less to `error.log`
    new winston.transports.File({ 
      filename: 'logs/error.log', 
      level: 'error',
      maxsize: 5242880, // 5MB
      maxFiles: 5
    }),
    // Write all logs with importance level of `info` or less to `combined.log`
    new winston.transports.File({ 
      filename: 'logs/combined.log',
      maxsize: 5242880, // 5MB
      maxFiles: 5
    })
  ]
});

// Add console logging in development
if (process.env.NODE_ENV !== 'production') {
  logger.add(new winston.transports.Console({
    format: winston.format.combine(
      winston.format.colorize(),
      winston.format.simple()
    )
  }));
}

/**
 * Custom error classes for better error handling
 */
class AppError extends Error {
  constructor(message, statusCode = 500, code = null) {
    super(message);
    this.statusCode = statusCode;
    this.code = code;
    this.isOperational = true;
    
    Error.captureStackTrace(this, this.constructor);
  }
}

class ValidationError extends AppError {
  constructor(message, errors = []) {
    super(message, 400, 'VALIDATION_ERROR');
    this.errors = errors;
  }
}

class AuthenticationError extends AppError {
  constructor(message = 'Authentication failed') {
    super(message, 401, 'AUTHENTICATION_ERROR');
  }
}

class AuthorizationError extends AppError {
  constructor(message = 'Access denied') {
    super(message, 403, 'AUTHORIZATION_ERROR');
  }
}

class NotFoundError extends AppError {
  constructor(resource = 'Resource') {
    super(`${resource} not found`, 404, 'NOT_FOUND');
  }
}

class ConflictError extends AppError {
  constructor(message = 'Resource conflict') {
    super(message, 409, 'CONFLICT');
  }
}

class RateLimitError extends AppError {
  constructor(message = 'Rate limit exceeded', resetTime = null) {
    super(message, 429, 'RATE_LIMIT_EXCEEDED');
    this.resetTime = resetTime;
  }
}

class ExternalAPIError extends AppError {
  constructor(message = 'External API error', service = 'unknown') {
    super(message, 502, 'EXTERNAL_API_ERROR');
    this.service = service;
  }
}

/**
 * Handle Prisma errors and convert to AppError
 */
function handlePrismaError(error) {
  console.error('Prisma error:', error);

  switch (error.code) {
    case 'P2002':
      // Unique constraint violation
      const field = error.meta?.target?.[0] || 'field';
      return new ConflictError(`${field} already exists`);
      
    case 'P2025':
      // Record not found
      return new NotFoundError();
      
    case 'P2003':
      // Foreign key constraint violation
      return new ValidationError('Referenced record does not exist');
      
    case 'P2014':
      // Invalid ID
      return new ValidationError('Invalid ID format');
      
    case 'P1001':
      // Database connection error
      return new AppError('Database connection failed', 503, 'DATABASE_CONNECTION_ERROR');
      
    default:
      return new AppError('Database operation failed', 500, 'DATABASE_ERROR');
  }
}

/**
 * Handle JWT errors
 */
function handleJWTError(error) {
  if (error.name === 'TokenExpiredError') {
    return new AuthenticationError('Token expired');
  }
  
  if (error.name === 'JsonWebTokenError') {
    return new AuthenticationError('Invalid token');
  }
  
  return new AuthenticationError('Token verification failed');
}

/**
 * Handle validation errors from express-validator
 */
function handleValidationError(errors) {
  const formattedErrors = errors.map(err => ({
    field: err.path || err.param,
    message: err.msg,
    value: err.value
  }));
  
  return new ValidationError('Validation failed', formattedErrors);
}

/**
 * Send error response in development
 */
function sendErrorDev(err, res) {
  res.status(err.statusCode || 500).json({
    success: false,
    error: {
      message: err.message,
      code: err.code,
      stack: err.stack,
      errors: err.errors || null,
      resetTime: err.resetTime || null
    }
  });
}

/**
 * Send error response in production
 */
function sendErrorProd(err, res) {
  // Operational, trusted error: send message to client
  if (err.isOperational) {
    res.status(err.statusCode).json({
      success: false,
      message: err.message,
      code: err.code,
      errors: err.errors || null,
      resetTime: err.resetTime || null
    });
  } else {
    // Programming or other unknown error: don't leak error details
    logger.error('Unknown error:', err);
    
    res.status(500).json({
      success: false,
      message: 'Something went wrong on our end. Please try again later.',
      code: 'INTERNAL_SERVER_ERROR'
    });
  }
}

/**
 * Main error handling middleware
 */
function errorHandler(err, req, res, next) {
  let error = { ...err };
  error.message = err.message;

  // Log error
  logger.error('Error caught by middleware:', {
    message: err.message,
    stack: err.stack,
    url: req.originalUrl,
    method: req.method,
    ip: req.ip,
    userId: req.user?.id || 'anonymous'
  });

  // Handle specific error types
  if (err.name === 'PrismaClientKnownRequestError' || err.name === 'PrismaClientValidationError') {
    error = handlePrismaError(err);
  } else if (err.name === 'TokenExpiredError' || err.name === 'JsonWebTokenError') {
    error = handleJWTError(err);
  } else if (err.name === 'ValidationError' && err.errors) {
    error = handleValidationError(err.errors);
  } else if (err.type === 'entity.parse.failed') {
    error = new ValidationError('Invalid JSON format');
  } else if (err.code === 'LIMIT_FILE_SIZE') {
    error = new ValidationError('File size too large');
  } else if (err.code === 'ENOTFOUND' || err.code === 'ECONNREFUSED') {
    error = new ExternalAPIError('External service unavailable');
  }

  // Ensure error has proper structure
  if (!error.statusCode) {
    error = new AppError(error.message || 'Internal server error', 500);
  }

  // Send response based on environment
  if (process.env.NODE_ENV === 'development') {
    sendErrorDev(error, res);
  } else {
    sendErrorProd(error, res);
  }
}

/**
 * Handle 404 errors for undefined routes
 */
function notFoundHandler(req, res) {
  const error = new NotFoundError(`Route ${req.originalUrl} not found`);
  
  logger.warn('Route not found:', {
    url: req.originalUrl,
    method: req.method,
    ip: req.ip
  });

  res.status(404).json({
    success: false,
    message: error.message,
    code: error.code,
    availableEndpoints: [
      'POST /api/auth/login',
      'POST /api/auth/register',
      'GET /api/trips',
      'POST /api/trips',
      'GET /api/alerts',
      'POST /api/alerts',
      'GET /health'
    ]
  });
}

/**
 * Async error wrapper to catch async errors in route handlers
 */
function asyncHandler(fn) {
  return (req, res, next) => {
    Promise.resolve(fn(req, res, next)).catch(next);
  };
}

/**
 * Create error response helper
 */
function createErrorResponse(message, statusCode = 500, code = null, errors = null) {
  return {
    success: false,
    message,
    code,
    ...(errors && { errors }),
    timestamp: new Date().toISOString()
  };
}

module.exports = {
  errorHandler,
  notFoundHandler,
  asyncHandler,
  createErrorResponse,
  logger,
  
  // Error classes
  AppError,
  ValidationError,
  AuthenticationError,
  AuthorizationError,
  NotFoundError,
  ConflictError,
  RateLimitError,
  ExternalAPIError
};