// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with subscription tiers
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  avatar    String?
  
  // Subscription info
  tier           SubscriptionTier @default(FREE)
  alertsUsed     Int              @default(0)
  maxAlerts      Int              @default(3)
  subscriptionId String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  trips         Trip[]
  alerts        Alert[]
  subscription  Subscription?
  activities    Activity[]
  
  @@map("users")
}

// Subscription model for Premium features
model Subscription {
  id                String            @id @default(cuid())
  userId            String            @unique
  stripeCustomerId  String            @unique
  stripeSubscriptionId String         @unique
  status            SubscriptionStatus
  tier              SubscriptionTier
  currentPeriodEnd  DateTime
  cancelAtPeriodEnd Boolean           @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscriptions")
}

// Trip model for travel planning
model Trip {
  id          String    @id @default(cuid())
  title       String
  destination String
  description String?
  
  // Trip dates and budget
  startDate   DateTime
  endDate     DateTime
  budget      Float?
  currency    String    @default("USD")
  
  // Trip status and sharing
  status      TripStatus @default(PLANNING)
  isPublic    Boolean    @default(false)
  shareCode   String?    @unique
  
  // User and collaboration
  userId      String
  collaborators String[] // Array of user IDs who can edit
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  activities  Activity[]
  alerts      Alert[]
  
  @@map("trips")
}

// Activity model for itinerary items
model Activity {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        ActivityType
  
  // Location and timing
  location    String
  latitude    Float?
  longitude   Float?
  startTime   DateTime
  endTime     DateTime?
  duration    Int?         // Duration in minutes
  
  // Cost and booking
  cost        Float?
  currency    String       @default("USD")
  bookingUrl  String?
  isBooked    Boolean      @default(false)
  
  // Trip association
  tripId      String
  userId      String
  day         Int          // Which day of the trip (1, 2, 3, etc.)
  order       Int          // Order within the day
  
  // Timestamps
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  trip        Trip         @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("activities")
}

// Price Alert model for flight monitoring
model Alert {
  id              String      @id @default(cuid())
  
  // Flight details
  fromLocation    String
  toLocation      String
  fromCode        String?     // Airport code (e.g., "JFK")
  toCode          String?     // Airport code (e.g., "LAX")
  
  // Dates
  departureDate   DateTime
  returnDate      DateTime?   // Optional for one-way trips
  isRoundTrip     Boolean     @default(false)
  
  // Alert configuration
  alertType       AlertType
  priceThreshold  Float?      // For price drop alerts
  percentage      Int?        // Percentage drop threshold
  maxPrice        Float?      // Maximum acceptable price
  
  // Alert status
  isActive        Boolean     @default(true)
  triggeredCount  Int         @default(0)
  lastTriggered   DateTime?
  lastChecked     DateTime?
  currentPrice    Float?
  
  // User and trip association
  userId          String
  tripId          String?     // Optional association with a trip
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  trip            Trip?       @relation(fields: [tripId], references: [id], onDelete: SetNull)
  notifications   AlertNotification[]
  
  @@map("alerts")
}

// Alert notification history
model AlertNotification {
  id          String              @id @default(cuid())
  alertId     String
  type        NotificationType
  message     String
  oldPrice    Float?
  newPrice    Float?
  priceChange Float?
  sent        Boolean             @default(false)
  sentAt      DateTime?
  
  createdAt   DateTime            @default(now())
  
  alert       Alert               @relation(fields: [alertId], references: [id], onDelete: Cascade)
  
  @@map("alert_notifications")
}

// Rate limiting for API usage
model RateLimit {
  id          String   @id @default(cuid())
  userId      String
  endpoint    String   // e.g., "flight_search", "price_alert"
  count       Int      @default(0)
  windowStart DateTime @default(now())
  
  @@unique([userId, endpoint])
  @@map("rate_limits")
}

// Enums
enum SubscriptionTier {
  FREE
  PREMIUM
  TEAM
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  INCOMPLETE
  TRIALING
}

enum TripStatus {
  PLANNING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum ActivityType {
  FLIGHT
  HOTEL
  RESTAURANT
  ACTIVITY
  TRANSPORT
  OTHER
}

enum AlertType {
  PRICE_DROP
  UNUSUAL_DROP
  LAST_MINUTE
  THRESHOLD
}

enum NotificationType {
  EMAIL
  PUSH
  SMS
}